from typing import Union, Optional, Callable, BinaryIO
import sys

# Standard encoding
def b64encode(s: Union[bytes, bytearray], altchars: Optional[bytes] = None) -> bytes: ...
def b64decode(s: Union[bytes, bytearray, str], altchars: Optional[bytes] = None, validate: bool = False) -> bytes: ...
def standard_b64encode(s: Union[bytes, bytearray]) -> bytes: ...
def standard_b64decode(s: Union[bytes, bytearray, str]) -> bytes: ...

# URL-safe encoding
def urlsafe_b64encode(s: Union[bytes, bytearray]) -> bytes: ...
def urlsafe_b64decode(s: Union[bytes, bytearray, str]) -> bytes: ...

# Base32
def b32encode(s: Union[bytes, bytearray]) -> bytes: ...
def b32decode(s: Union[bytes, bytearray, str], casefold: bool = False, map01: Optional[bytes] = None) -> bytes: ...

# Base16
def b16encode(s: Union[bytes, bytearray]) -> bytes: ...
def b16decode(s: Union[bytes, bytearray, str], casefold: bool = False) -> bytes: ...

# Base85
if sys.version_info >= (3, 4):
    def a85encode(b: Union[bytes, bytearray], *, foldspaces: bool = False, wrapcol: int = 0, pad: bool = False, adobe: bool = False) -> bytes: ...
    def a85decode(b: Union[bytes, bytearray, str], *, foldspaces: bool = False, adobe: bool = False, ignorechars: Union[str, bytes] = b' \t\n\r\v') -> bytes: ...
    def b85encode(b: Union[bytes, bytearray], pad: bool = False) -> bytes: ...
    def b85decode(b: Union[bytes, bytearray, str]) -> bytes: ...

# Encoding and decoding for RFC 3548
def b32hexencode(s: Union[bytes, bytearray]) -> bytes: ...
def b32hexdecode(s: Union[bytes, bytearray, str], casefold: bool = False) -> bytes: ...

# Helper functions
def encodebytes(s: bytes) -> bytes: ...
def decodebytes(s: bytes) -> bytes: ...

# Aliases for backward compatibility
encodestring = encodebytes
decodestring = decodebytes

# Constants
MAXLINESIZE: int
MAXBINSIZE: int

# Custom exceptions
class Error(ValueError): ...

# Encoder and decoder classes
class Encoder:
    def __init__(self, input: BinaryIO, output: BinaryIO) -> None: ...
    def encode(self, data: bytes) -> None: ...
    def flush(self) -> None: ...

class Decoder:
    def __init__(self, input: BinaryIO, output: BinaryIO) -> None: ...
    def decode(self, data: bytes) -> None: ...
    def flush(self) -> None: ...

# Fast Base64 extension (our custom module)
def encode(s: Union[bytes, bytearray]) -> bytes: ...
def decode(s: Union[bytes, bytearray, str]) -> bytes: ...