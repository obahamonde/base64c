from typing import Optional, Union


def b64encode(s: bytes, altchars: Optional[bytes] = ...) -> bytes: ...
def b64decode(
    s: Union[bytes, str], altchars: Optional[bytes] = ..., validate: bool = ...
) -> bytes: ...
def standard_b64encode(s: bytes) -> bytes: ...
def standard_b64decode(s: Union[bytes, str]) -> bytes: ...
def urlsafe_b64encode(s: bytes) -> bytes: ...
def urlsafe_b64decode(s: Union[bytes, str]) -> bytes: ...


def b32encode(s: bytes) -> bytes: ...
def b32decode(
    s: Union[bytes, str], casefold: bool = ..., map01: Optional[bytes] = ...
) -> bytes: ...
def b16encode(s: bytes) -> bytes: ...
def b16decode(s: Union[bytes, str], casefold: bool = ...) -> bytes: ...


def a85encode(
    b: bytes,
    foldspaces: bool = ...,
    wrapcol: int = ...,
    pad: bool = ...,
    adobe: bool = ...,
) -> bytes: ...
def a85decode(
    b: Union[bytes, str],
    foldspaces: bool = ...,
    adobe: bool = ...,
    ignorechars: Optional[bytes] = ...,
) -> bytes: ...


def b85encode(b: bytes, pad: bool = ...) -> bytes: ...
def b85decode(b: Union[bytes, str]) -> bytes: ...


def encode(input: bytes, output: bytes) -> None: ...
def decode(input: bytes, output: bytes) -> None: ...


def encodebytes(s: bytes) -> bytes: ...
def decodebytes(s: bytes) -> bytes: ...
